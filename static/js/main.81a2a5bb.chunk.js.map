{"version":3,"sources":["node/Node.js","pathfinding/Pathfinding.js","App.js","serviceWorker.js","index.js"],"names":["Node","props","nodePos","zInd","visited","specialNode","wall","className","style","zIndex","Pathfinding","Dijkstra","matrix","endNode","sourceNode","visitedNodes","unvisitedNodes","getAllNodes","slice","sortNodes","closestNode","shift","dist","Infinity","setTimeout","visitNode","push","updateUnvisitedNodes","length","node","unvisitedNeighbors","getNeighborsNodes","neighbor","parent","map","find","un","neighbors","i","parseInt","split","j","Object","assign","filter","state","updatedNode","createNode","setState","sort","node_a","node_b","nodes","row","el","setWall","currentNode","isNormal","search","isDrawing","previousNode","classList","handleDrawing","e","mouseEvents","down","leave","move","up","mouseEv","type","target","preventDefault","isWall","key","initNodeMatrix","cols","rows","Array","delta","x","Math","floor","currentColSize","ceil","initPoint","endPoint","setNodeMatrix","window","innerHeight","innerWidth","nodeSize","nodeWidth","nodeHeight","nodesState","handleResize","addEventListener","this","onClick","onMouseDown","onMouseMove","onMouseUp","onMouseLeave","rowId","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.81a2a5bb.chunk.js","sourcesContent":["import React from 'react'\nimport './node.css';\n\nconst Node = (props) => {\n  const { nodePos, zInd, visited, specialNode, wall } = props;\n  if (visited)\n    return (<div className={'node ' + nodePos + ' visited'} style={{zIndex: zInd*-1}}></div>)\n  if (typeof specialNode !== 'undefined')\n    return (<div className={'node ' + nodePos + specialNode} style={{zIndex: zInd*-1}}></div>)\n  if (wall){\n    return (<div className={'node ' + nodePos + ' wall'} style={{zIndex: zInd*-1}}></div>)\n  }\n  return (<div className={'node ' + nodePos} style={{zIndex: zInd*-1}}></div>)\n}\n\n\nexport default Node;\n","import React from 'react';\nimport Node from '../node/Node';\nimport './pathfinding.css';\n  \nclass Pathfinding extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      matrix: [],\n      sourceNode: null,\n      endNode: null\n    }\n    this.nodeSize = {\n      nodeWidth: 80,\n      nodeHeight: 80\n    }\n    this.isDrawing = false;\n    this.previousNode = null;\n    this.mouseEvents = {\n      down: 'mousedown',\n      up: 'mouseup',\n      move: 'mousemove',\n      leave: 'mouseleave'\n    }\n  }\n\n  Dijkstra = ({matrix, sourceNode, endNode}) => {\n    const visitedNodes = []\n    const grid = this.getAllNodes(matrix);\n    let unvisitedNodes = grid.slice();\n    while(!!unvisitedNodes.length) {\n      this.sortNodes(unvisitedNodes);\n      const closestNode = unvisitedNodes.shift();\n      if (closestNode.wall) continue;\n      if (closestNode.dist === Infinity) return visitedNodes;\n      // if (closestNode.nodePos === endNode.props.nodePos) return visitedNodes;\n      if (closestNode.nodePos === endNode.props.nodePos) break;\n      setTimeout(() => {\n        this.visitNode(closestNode)\n      }, 200);\n      visitedNodes.push(closestNode);\n      unvisitedNodes = this.updateUnvisitedNodes(closestNode, matrix, unvisitedNodes);\n    }\n  }\n\n  updateUnvisitedNodes = (node, matrix, unvisitedNodes) => {\n    const unvisitedNeighbors = this.getNeighborsNodes(node, matrix);\n    for (const neighbor of unvisitedNeighbors) {\n      neighbor.dist = node.dist + 1;\n      neighbor.parent = node;\n    }\n    return unvisitedNodes = unvisitedNodes.map(node => unvisitedNeighbors.find(un => un.nodePos === node.nodePos) || node);\n  }\n  getNeighborsNodes = (node, matrix) => {\n    const neighbors = [];\n    const i = parseInt(node.nodePos.split(\" \")[0]);\n    const j = parseInt(node.nodePos.split(\" \")[1]);\n    if (i > 0 && j < matrix[i-1].length) {\n      neighbors.push(Object.assign({}, matrix[i-1][j].props))\n    };\n    if (i < matrix.length-1 && j < matrix[i+1].length) {\n      neighbors.push(Object.assign({}, matrix[i+1][j].props));  \n    }\n    if (j > 0) {\n      neighbors.push(Object.assign({}, matrix[i][j-1].props));\n    }\n    if (j < matrix[i].length-1) {\n      neighbors.push(Object.assign({}, matrix[i][j+1].props));\n    }\n    return neighbors.filter(neighbor => !neighbor.visited)\n  }\n\n  visitNode = (node) => {\n    if (!!node.specialNode) return;\n    const [i, j] = node.nodePos.split(\" \");\n    let matrix = this.state.matrix;\n    let updatedNode = this.createNode(node.nodePos, parseInt(i), parseInt(j), true, false);\n    matrix[i][j] = updatedNode;\n    this.setState(matrix)\n  }\n  sortNodes = (unvisitedNodes) => {\n    unvisitedNodes.sort((node_a, node_b) => {return node_a.dist-node_b.dist})\n  }\n\n  getAllNodes = (matrix) => {\n    const nodes = [];\n    for (const row of matrix) {\n      for (const el of row) {\n        nodes.push(el.props)\n      }\n    }\n    return nodes;\n  }\n  setWall = (currentNode) => {\n    let isNormal = currentNode.className.search(/[0-9]/)  !== -1;\n    if (this.isDrawing && isNormal && currentNode !== this.previousNode){\n      let i = parseInt(currentNode.classList[1]);\n      let j = parseInt(currentNode.classList[2]);\n      if (!j && j!==0)\n        j=i;\n      if (!!this.state.matrix[i][j]) {\n        if (!!this.state.matrix[i][j].props.specialNode) {\n          return;\n        }\n      }\n      let isWall = currentNode.className.search('wall') !== -1;\n      if (isWall) {\n        let matrix = this.state.matrix;\n        let updatedNode = this.createNode(`${i} ${j}`, i, j, false, false);\n        matrix[i][j] = updatedNode;\n        this.setState({matrix})\n      } else {\n        let matrix = this.state.matrix;\n        let updatedNode = this.createNode(`${i} ${j}`, i, j, false, true);\n        matrix[i][j] = updatedNode;\n        this.setState({matrix})\n      }\n      this.previousNode = currentNode\n    }\n  }\n  handleDrawing = (e) => {\n    const { down, leave, move, up} = this.mouseEvents;\n    let mouseEv = e.type;\n    let currentNode = e.target;\n    if (mouseEv === down) {\n      e.preventDefault();\n      this.isDrawing = true;\n      this.setWall(currentNode);\n    } else if (mouseEv === up || mouseEv === leave) {\n      this.isDrawing = false;\n      this.previousNode = null;\n    } else if (mouseEv === move){\n      this.setWall(currentNode);\n    }\n  }\n  createNode = (nodePos, i, j, visited, isWall, parent, specialNode) => {\n    if (!!specialNode)\n      return <Node specialNode={specialNode} visited={visited} nodePos={nodePos} dist={specialNode===' init-point' ? 0 : Infinity} zInd={i+j} key={`node${i}${j}`} wall={isWall}></Node>;\n    return <Node nodePos={nodePos} dist={Infinity} visited={visited} parent={parent} zInd={i+j} key={`node${i}${j}`} wall={isWall}></Node>;\n  }\n\n  initNodeMatrix = (cols, rows) => {\n    let matrix = new Array(rows);\n    let delta = 1/(rows/2);\n    let x = 0;\n    let endNode, sourceNode;\n    for (let i = 0; i < rows; i++) {\n      if (i < Math.floor(rows*3/5))\n        x +=delta\n      else\n        x-=delta \n      let currentColSize = Math.ceil(cols*x);\n      matrix[i] = new Array(currentColSize);\n      for (let j = 0; j < currentColSize; j++){\n        let initPoint = i === Math.floor(rows/2) && j === Math.floor(cols*0.1);\n        let endPoint =  i === Math.floor(rows/2) && j === Math.floor(cols*0.9);\n        if (initPoint){\n          matrix[i][j] =  this.createNode(`${i} ${j}`, i, j, false, false, null, ' init-point');\n          sourceNode = matrix[i][j];\n        }\n        else if (endPoint){\n          matrix[i][j] = this.createNode(`${i} ${j}`, i, j, false, false, null, ' end-point');\n          endNode = matrix[i][j];\n        }\n        else\n          matrix[i][j] = this.createNode(`${i} ${j}`, i, j, false, false, null);\n      }\n    }\n    return {matrix, sourceNode, endNode};\n  }\n  \n  setNodeMatrix = () => {\n    const {innerHeight, innerWidth} = window;\n    const { nodeWidth, nodeHeight } = this.nodeSize;\n    let cols = Math.floor(innerWidth/nodeWidth);\n    let rows = Math.floor(innerHeight/nodeHeight)*2;\n    let nodesState = this.initNodeMatrix(cols, rows);\n    this.setState(nodesState);\n  }\n\n  handleResize = () => {\n    this.setNodeMatrix();\n  } \n  componentDidMount() {\n    window.addEventListener('resize', this.handleResize)\n    this.setNodeMatrix();\n  }\n  render() {\n    return ( \n      <div>\n        {/* <div onClick={() => this.visitNode('0 0')}>Visit node</div> */}\n        <div onClick={() => this.Dijkstra(this.state)}>Visit node</div>\n          <div \n          onMouseDown={this.handleDrawing}\n          onMouseMove={this.handleDrawing} \n          onMouseUp={this.handleDrawing} \n          onMouseLeave={this.handleDrawing}\n            className=\"matrix\">\n              {this.state.matrix === null ? 'Loading' :\n              this.state.matrix.map((row, rowId, rows) => {\n                if (rowId > rows.length/2)\n                  return <div className='row end' key={rowId}>{row}</div>\n                return <div className='row start' key={rowId}>{row}</div>\n              })}\n        </div>\n      </div>\n    )\n  }\n}\nexport default Pathfinding;\n","import React from 'react';\nimport Pathfinding from './pathfinding/Pathfinding';\nimport './App.css';\n\nfunction App() {\n  return (\n    <main>\n      <h1>Path finding visualizer</h1>\n      <Pathfinding className=\"dinamic-matrix\"></Pathfinding>\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}